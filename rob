#define ticks_per_rev 200
#define wheel_rayon 30
#define center_distance
#define kd 0.01
#define kp 1
#define ki 0.5
#define pi 3.14159

#define encoderRa 1
#define encoderRb 2
#define encoderLa 7
#define encoderLb 8

#define MR1 3
#define MR2 5
#define ML1 6
#define ML2 9

long counterR=0;
long counterL=0;
float wheel_perimeter= 2*pi*wheel_rayon;
int a=0;
int b=0;
  
void setup()
{
  attachInterrupt(digitalPinToInterrupt(encoderLa),ReadEncoderLa,CHANGE);
  attachInterrupt(digitalPinToInterrupt(encoderRb),ReadEncoderLb,CHANGE);
  attachInterrupt(digitalPinToInterrupt(encoderRa),ReadEncoderRa,CHANGE);
  attachInterrupt(digitalPinToInterrupt(encoderRb),ReadEncoderRb,CHANGE);   
}

void loop()
{
  
  
  
}
void ReadEncoderLa(){
  int a= digitalRead(encoderLa);
  int b= digitalRead(encoderLb);
  if(a^b){
    counterL ++;
  }
  else{
    counterL--;
  }
}
void ReadEncoderLb(){
  int a= digitalRead(encoderLa);
  int b= digitalRead(encoderLb);
  if(!(a^b)){
    counterL ++;
  }
  else{
    counterL--;
  }
}

void ReadEncoderRa(){
  int a= digitalRead(encoderRa);
  int b= digitalRead(encoderRb);
  if(a^b){
    counterR++;
  }
  else{
    counterR--;
  }
}

void ReadEncoderRb(){
  int a= digitalRead(encoderRa);
  int b= digitalRead(encoderRb);
  if(!(a^b)){
    counterR ++;
  }
  else{
    counterR--;
  }
}

float tickstomm(float ticks){
  float tickmm=wheel_perimeter/ticks_per_rev;
  return ticks* tickmm;
  }
// Define constants for the PID controller
const float kp = 1.0; // Proportional constant
const float ki = 0.1; // Integral constant
const float kd = 0.05; // Derivative constant

// Define variables for the PID controller
float setpoint = 200.0; // Desired speed in RPM
float input = 0.0; // Actual speed in RPM
float output = 0.0; // Output signal to the motor
float last_input = 0.0; // Previous speed measurement
float integral_term = 0.0; // Integral term of the controller
unsigned long last_time = 0; // Last time the PID loop was run
unsigned long sample_time = 10; // Sampling time in milliseconds

// Define pins for the motor driver
int motor_pin1 = 9;
int motor_pin2 = 10;

void setup() {
  // Set the motor driver pins as outputs
  pinMode(motor_pin1, OUTPUT);
  pinMode(motor_pin2, OUTPUT);
}

void loop() {
  // Calculate the elapsed time since the last loop
  unsigned long now = millis();
  unsigned long elapsed_time = now - last_time;

  // Only run the PID loop if the sampling time has elapsed
  if (elapsed_time >= sample_time) {
    // Read the current speed of the motor (in RPM)
    input = analogRead(A0); // Assume the motor speed is measured with an analog input

    // Calculate the error between the setpoint and the actual speed
    float error = setpoint - input;

    // Calculate the integral term of the controller
    integral_term += error * elapsed_time;

    // Calculate the derivative term of the controller
    float derivative_term = (input - last_input) / elapsed_time;

    // Calculate the output signal to the motor
    output = kp * error + ki * integral_term + kd * derivative_term;

    // Update the motor driver pins based on the output signal
    if (output > 0.0) {
      // Set the motor direction to forward
      digitalWrite(motor_pin1, HIGH);
      digitalWrite(motor_pin2, LOW);
    } else {
      // Set the motor direction to backward
      digitalWrite(motor_pin1, LOW);
      digitalWrite(motor_pin2, HIGH);
      // Invert the output signal to make it positive for the motor driver
      output = -output;
    }

    // Set the motor speed based on the output signal
    analogWrite(motor_pin1, output);

    // Remember the current speed measurement and the last loop time
    last_input = input;
    last_time = now;
  }
}


